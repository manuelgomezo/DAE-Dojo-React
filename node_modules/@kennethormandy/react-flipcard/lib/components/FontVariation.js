'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _LabelWrapper = require('./LabelWrapper');

var _LabelWrapper2 = _interopRequireDefault(_LabelWrapper);

var _Slider = require('./Slider');

var _Slider2 = _interopRequireDefault(_Slider);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

// import _throttle from 'lodash.throttle'
// import FontFaceObserver from 'fontfaceobserver'

var FontVariation = function (_React$Component) {
  _inherits(FontVariation, _React$Component);

  function FontVariation(props) {
    _classCallCheck(this, FontVariation);

    var _this = _possibleConstructorReturn(this, (FontVariation.__proto__ || Object.getPrototypeOf(FontVariation)).call(this, props));

    var defaultState = {};

    // Set default state defaults from variation props
    props.variations.forEach(function (variation) {
      defaultState[variation.axisTag] = variation.defaultValue || variation.minValue;
    });

    _this.state = defaultState;
    return _this;
  }

  _createClass(FontVariation, [{
    key: 'render',
    value: function render() {
      var _this2 = this;

      var props = this.props;
      var state = props.variationsState || this.state;

      var fontVariationSettings = props.variations.map(function (axis) {
        return '"' + axis.axisTag + '" ' + state[axis.axisTag];
      });

      return _react2.default.createElement(
        'form',
        null,
        _react2.default.createElement(
          'div',
          {
            style: { display: 'flex', marginLeft: '-1em', marginRight: '-1em' } },
          props.variations.map(function (axis, index) {
            var tag = axis.axisTag;
            return _react2.default.createElement(
              _LabelWrapper2.default,
              {
                key: 'VariationsWraper_Axis_' + tag + '_' + index,
                label: axis.name,
                secondaryLabel: _react2.default.createElement(
                  'span',
                  null,
                  state[tag],
                  _react2.default.createElement(
                    'span',
                    null,
                    '/',
                    axis.maxValue
                  )
                ) },
              _react2.default.createElement(_Slider2.default, {
                fill: true,
                dark: props.dark,
                type: 'range',
                name: tag,
                step: axis.step,
                value: state[tag],
                min: axis.minValue,
                max: axis.maxValue,
                onChange: function onChange(e) {
                  if (props.onChange !== false) {
                    props.onChange(e);
                  } else {
                    var obj = {};
                    var _tag = e.target.name;
                    obj[_tag] = e.target.valueAsNumber;
                    return _this2.setState(obj);
                  }
                }
              })
            );
          })
        ),
        _react2.default.createElement(
          'div',
          {
            style: {
              fontFamily: props.fontFamily,
              fontVariationSettings: fontVariationSettings.join(', ')
            } },
          props.children,
          props.showCode ? _react2.default.createElement(
            'div',
            { className: 'mt3 md-mt4 mx-auto max-width-3' },
            _react2.default.createElement(
              'div',
              { className: 'px2 mb1' },
              'CSS'
            ),
            _react2.default.createElement(
              'pre',
              null,
              _react2.default.createElement(
                'code',
                null,
                'body {\n  font-family: ' + props.fontFamily + ';\n  font-feature-settings: ' + fontVariationSettings.join(', ') + ';\n}'
              )
            )
          ) : null
        )
      );
    }
  }]);

  return FontVariation;
}(_react2.default.Component);

FontVariation.defaultProps = {
  fontFamily: 'Skia, sans-serif',
  onChange: false,
  showCode: false,
  dark: false,
  variationsState: false,
  variations: [{
    name: 'Weight',
    axisTag: 'wght',
    defaultValue: 1,
    minValue: 0.4,
    maxValue: 3.2,
    step: 0.05 // TODO Automatically calculate this
  }]
};

exports.default = FontVariation;