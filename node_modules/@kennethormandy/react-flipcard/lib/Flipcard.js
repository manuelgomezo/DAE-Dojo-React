'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

// Rewrite of mzabriskie/react-flipcard, MIT via https://git.io/vdKLa
// Adds support for revolving-door transition, MIT via https://git.io/vdKc7

var Flipcard = function (_React$Component) {
  _inherits(Flipcard, _React$Component);

  function Flipcard(props) {
    _classCallCheck(this, Flipcard);

    var _this = _possibleConstructorReturn(this, (Flipcard.__proto__ || Object.getPrototypeOf(Flipcard)).call(this, props));

    _this.state = {
      isFlipped: props.flipped,
      flipperRotate: 0
    };
    return _this;
  }

  _createClass(Flipcard, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      // this._hideFlippedSide()
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(newProps) {
      var rotate = this.state.flipperRotate;

      if (this.props.type === 'revolving-door') {
        rotate = this.state.flipperRotate + 180;
      }

      if (!this.props.disabled) {
        if (newProps.flipped === true && this.state.isFlipped === false || newProps.flipped === false && this.state.isFlipped === true) {
          return this.setState({
            isFlipped: !this.state.isFlipped,
            flipperRotate: rotate
          });
        }
      }

      return false;
    }
  }, {
    key: 'render',
    value: function render() {
      var props = this.props;
      var state = this.state;

      var type = props.type,
          flipped = props.flipped,
          disabled = props.disabled,
          classNameFlipper = props.classNameFlipper,
          classNameFront = props.classNameFront,
          classNameBack = props.classNameBack,
          remainingProps = _objectWithoutProperties(props, ['type', 'flipped', 'disabled', 'classNameFlipper', 'classNameFront', 'classNameBack']);

      // TODO Always seems to update styles on Safari?


      var styles = type === 'revolving-door' ? {
        WebkitTransform: 'rotateY(' + state.flipperRotate + 'deg)',
        transform: 'rotateY(' + state.flipperRotate + 'deg)'
      } : {};

      var classes = ['Flipcard-flipper', state.isFlipped === true ? 'Flipcard--flipped' : '', 'Flipcard--' + type, classNameFlipper];

      return _react2.default.createElement(
        'div',
        _extends({}, remainingProps, { className: 'Flipcard', tabIndex: 0 }),
        _react2.default.createElement(
          'div',
          { className: classes.join(' '), style: styles },
          [0, 1].map(function (index) {
            var child = props.children[index];
            var zero = 0;
            var one = 1;
            if (index === 1) {
              zero = 1;
              one = 0;
            }

            return _react2.default.createElement(
              'div',
              {
                key: 'Flipcard_card_' + index,
                className: 'Flipcard-' + (index === 0 ? 'front ' + classNameFront : 'back ' + classNameBack),
                style: {
                  opacity: state.isFlipped ? zero : one,
                  userSelect: state.isFlipped && !disabled === true ? 'none' : null,
                  cursor: !disabled && (typeof props.onClick === 'function' || typeof child.props.onClick === 'function') ? 'pointer' : 'auto'
                },
                tabIndex: -1,
                'aria-hidden': state.isFlipped && !disabled },
              child
            );
          })
        )
      );
    }
  }]);

  return Flipcard;
}(_react2.default.Component);

Flipcard.defaultProps = {
  type: 'horizontal',
  flipped: false,
  disabled: false,
  classNameFlipper: '',
  classNameFront: '',
  classNameBack: ''
};

exports.default = Flipcard;